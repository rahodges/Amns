//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Amns.GreyFox.Resources {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class AddressDictionary : DataSet {
        
        private StreetSuffixDataTable tableStreetSuffix;
        
        private CountryDataTable tableCountry;
        
        private CityDataTable tableCity;
        
        private StateProvinceDataTable tableStateProvince;
        
        public AddressDictionary() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected AddressDictionary(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["StreetSuffix"] != null)) {
                    this.Tables.Add(new StreetSuffixDataTable(ds.Tables["StreetSuffix"]));
                }
                if ((ds.Tables["Country"] != null)) {
                    this.Tables.Add(new CountryDataTable(ds.Tables["Country"]));
                }
                if ((ds.Tables["City"] != null)) {
                    this.Tables.Add(new CityDataTable(ds.Tables["City"]));
                }
                if ((ds.Tables["StateProvince"] != null)) {
                    this.Tables.Add(new StateProvinceDataTable(ds.Tables["StateProvince"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StreetSuffixDataTable StreetSuffix {
            get {
                return this.tableStreetSuffix;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CountryDataTable Country {
            get {
                return this.tableCountry;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CityDataTable City {
            get {
                return this.tableCity;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StateProvinceDataTable StateProvince {
            get {
                return this.tableStateProvince;
            }
        }
        
        public override DataSet Clone() {
            AddressDictionary cln = ((AddressDictionary)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["StreetSuffix"] != null)) {
                this.Tables.Add(new StreetSuffixDataTable(ds.Tables["StreetSuffix"]));
            }
            if ((ds.Tables["Country"] != null)) {
                this.Tables.Add(new CountryDataTable(ds.Tables["Country"]));
            }
            if ((ds.Tables["City"] != null)) {
                this.Tables.Add(new CityDataTable(ds.Tables["City"]));
            }
            if ((ds.Tables["StateProvince"] != null)) {
                this.Tables.Add(new StateProvinceDataTable(ds.Tables["StateProvince"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableStreetSuffix = ((StreetSuffixDataTable)(this.Tables["StreetSuffix"]));
            if ((this.tableStreetSuffix != null)) {
                this.tableStreetSuffix.InitVars();
            }
            this.tableCountry = ((CountryDataTable)(this.Tables["Country"]));
            if ((this.tableCountry != null)) {
                this.tableCountry.InitVars();
            }
            this.tableCity = ((CityDataTable)(this.Tables["City"]));
            if ((this.tableCity != null)) {
                this.tableCity.InitVars();
            }
            this.tableStateProvince = ((StateProvinceDataTable)(this.Tables["StateProvince"]));
            if ((this.tableStateProvince != null)) {
                this.tableStateProvince.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "AddressDictionary";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Dataset1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableStreetSuffix = new StreetSuffixDataTable();
            this.Tables.Add(this.tableStreetSuffix);
            this.tableCountry = new CountryDataTable();
            this.Tables.Add(this.tableCountry);
            this.tableCity = new CityDataTable();
            this.Tables.Add(this.tableCity);
            this.tableStateProvince = new StateProvinceDataTable();
            this.Tables.Add(this.tableStateProvince);
        }
        
        private bool ShouldSerializeStreetSuffix() {
            return false;
        }
        
        private bool ShouldSerializeCountry() {
            return false;
        }
        
        private bool ShouldSerializeCity() {
            return false;
        }
        
        private bool ShouldSerializeStateProvince() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void StreetSuffixRowChangeEventHandler(object sender, StreetSuffixRowChangeEvent e);
        
        public delegate void CountryRowChangeEventHandler(object sender, CountryRowChangeEvent e);
        
        public delegate void CityRowChangeEventHandler(object sender, CityRowChangeEvent e);
        
        public delegate void StateProvinceRowChangeEventHandler(object sender, StateProvinceRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StreetSuffixDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCommon;
            
            private DataColumn columnPrimary;
            
            private DataColumn columnAbbreviation;
            
            internal StreetSuffixDataTable() : 
                    base("StreetSuffix") {
                this.InitClass();
            }
            
            internal StreetSuffixDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CommonColumn {
                get {
                    return this.columnCommon;
                }
            }
            
            internal DataColumn PrimaryColumn {
                get {
                    return this.columnPrimary;
                }
            }
            
            internal DataColumn AbbreviationColumn {
                get {
                    return this.columnAbbreviation;
                }
            }
            
            public StreetSuffixRow this[int index] {
                get {
                    return ((StreetSuffixRow)(this.Rows[index]));
                }
            }
            
            public event StreetSuffixRowChangeEventHandler StreetSuffixRowChanged;
            
            public event StreetSuffixRowChangeEventHandler StreetSuffixRowChanging;
            
            public event StreetSuffixRowChangeEventHandler StreetSuffixRowDeleted;
            
            public event StreetSuffixRowChangeEventHandler StreetSuffixRowDeleting;
            
            public void AddStreetSuffixRow(StreetSuffixRow row) {
                this.Rows.Add(row);
            }
            
            public StreetSuffixRow AddStreetSuffixRow(string Common, string Primary, string Abbreviation) {
                StreetSuffixRow rowStreetSuffixRow = ((StreetSuffixRow)(this.NewRow()));
                rowStreetSuffixRow.ItemArray = new object[] {
                        Common,
                        Primary,
                        Abbreviation};
                this.Rows.Add(rowStreetSuffixRow);
                return rowStreetSuffixRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                StreetSuffixDataTable cln = ((StreetSuffixDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new StreetSuffixDataTable();
            }
            
            internal void InitVars() {
                this.columnCommon = this.Columns["Common"];
                this.columnPrimary = this.Columns["Primary"];
                this.columnAbbreviation = this.Columns["Abbreviation"];
            }
            
            private void InitClass() {
                this.columnCommon = new DataColumn("Common", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommon);
                this.columnPrimary = new DataColumn("Primary", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrimary);
                this.columnAbbreviation = new DataColumn("Abbreviation", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAbbreviation);
                this.columnAbbreviation.AllowDBNull = false;
                this.CaseSensitive = true;
            }
            
            public StreetSuffixRow NewStreetSuffixRow() {
                return ((StreetSuffixRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new StreetSuffixRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(StreetSuffixRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StreetSuffixRowChanged != null)) {
                    this.StreetSuffixRowChanged(this, new StreetSuffixRowChangeEvent(((StreetSuffixRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StreetSuffixRowChanging != null)) {
                    this.StreetSuffixRowChanging(this, new StreetSuffixRowChangeEvent(((StreetSuffixRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StreetSuffixRowDeleted != null)) {
                    this.StreetSuffixRowDeleted(this, new StreetSuffixRowChangeEvent(((StreetSuffixRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StreetSuffixRowDeleting != null)) {
                    this.StreetSuffixRowDeleting(this, new StreetSuffixRowChangeEvent(((StreetSuffixRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStreetSuffixRow(StreetSuffixRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StreetSuffixRow : DataRow {
            
            private StreetSuffixDataTable tableStreetSuffix;
            
            internal StreetSuffixRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableStreetSuffix = ((StreetSuffixDataTable)(this.Table));
            }
            
            public string Common {
                get {
                    try {
                        return ((string)(this[this.tableStreetSuffix.CommonColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStreetSuffix.CommonColumn] = value;
                }
            }
            
            public string Primary {
                get {
                    try {
                        return ((string)(this[this.tableStreetSuffix.PrimaryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStreetSuffix.PrimaryColumn] = value;
                }
            }
            
            public string Abbreviation {
                get {
                    return ((string)(this[this.tableStreetSuffix.AbbreviationColumn]));
                }
                set {
                    this[this.tableStreetSuffix.AbbreviationColumn] = value;
                }
            }
            
            public bool IsCommonNull() {
                return this.IsNull(this.tableStreetSuffix.CommonColumn);
            }
            
            public void SetCommonNull() {
                this[this.tableStreetSuffix.CommonColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrimaryNull() {
                return this.IsNull(this.tableStreetSuffix.PrimaryColumn);
            }
            
            public void SetPrimaryNull() {
                this[this.tableStreetSuffix.PrimaryColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StreetSuffixRowChangeEvent : EventArgs {
            
            private StreetSuffixRow eventRow;
            
            private DataRowAction eventAction;
            
            public StreetSuffixRowChangeEvent(StreetSuffixRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StreetSuffixRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CountryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPrimary;
            
            private DataColumn columnCommon;
            
            private DataColumn columnAbbreviation;
            
            internal CountryDataTable() : 
                    base("Country") {
                this.InitClass();
            }
            
            internal CountryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PrimaryColumn {
                get {
                    return this.columnPrimary;
                }
            }
            
            internal DataColumn CommonColumn {
                get {
                    return this.columnCommon;
                }
            }
            
            internal DataColumn AbbreviationColumn {
                get {
                    return this.columnAbbreviation;
                }
            }
            
            public CountryRow this[int index] {
                get {
                    return ((CountryRow)(this.Rows[index]));
                }
            }
            
            public event CountryRowChangeEventHandler CountryRowChanged;
            
            public event CountryRowChangeEventHandler CountryRowChanging;
            
            public event CountryRowChangeEventHandler CountryRowDeleted;
            
            public event CountryRowChangeEventHandler CountryRowDeleting;
            
            public void AddCountryRow(CountryRow row) {
                this.Rows.Add(row);
            }
            
            public CountryRow AddCountryRow(string Primary, string Common, string Abbreviation) {
                CountryRow rowCountryRow = ((CountryRow)(this.NewRow()));
                rowCountryRow.ItemArray = new object[] {
                        Primary,
                        Common,
                        Abbreviation};
                this.Rows.Add(rowCountryRow);
                return rowCountryRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CountryDataTable cln = ((CountryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CountryDataTable();
            }
            
            internal void InitVars() {
                this.columnPrimary = this.Columns["Primary"];
                this.columnCommon = this.Columns["Common"];
                this.columnAbbreviation = this.Columns["Abbreviation"];
            }
            
            private void InitClass() {
                this.columnPrimary = new DataColumn("Primary", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrimary);
                this.columnCommon = new DataColumn("Common", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommon);
                this.columnAbbreviation = new DataColumn("Abbreviation", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAbbreviation);
                this.CaseSensitive = true;
            }
            
            public CountryRow NewCountryRow() {
                return ((CountryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CountryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CountryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CountryRowChanged != null)) {
                    this.CountryRowChanged(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CountryRowChanging != null)) {
                    this.CountryRowChanging(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CountryRowDeleted != null)) {
                    this.CountryRowDeleted(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CountryRowDeleting != null)) {
                    this.CountryRowDeleting(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCountryRow(CountryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CountryRow : DataRow {
            
            private CountryDataTable tableCountry;
            
            internal CountryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCountry = ((CountryDataTable)(this.Table));
            }
            
            public string Primary {
                get {
                    try {
                        return ((string)(this[this.tableCountry.PrimaryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCountry.PrimaryColumn] = value;
                }
            }
            
            public string Common {
                get {
                    try {
                        return ((string)(this[this.tableCountry.CommonColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCountry.CommonColumn] = value;
                }
            }
            
            public string Abbreviation {
                get {
                    try {
                        return ((string)(this[this.tableCountry.AbbreviationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCountry.AbbreviationColumn] = value;
                }
            }
            
            public bool IsPrimaryNull() {
                return this.IsNull(this.tableCountry.PrimaryColumn);
            }
            
            public void SetPrimaryNull() {
                this[this.tableCountry.PrimaryColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommonNull() {
                return this.IsNull(this.tableCountry.CommonColumn);
            }
            
            public void SetCommonNull() {
                this[this.tableCountry.CommonColumn] = System.Convert.DBNull;
            }
            
            public bool IsAbbreviationNull() {
                return this.IsNull(this.tableCountry.AbbreviationColumn);
            }
            
            public void SetAbbreviationNull() {
                this[this.tableCountry.AbbreviationColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CountryRowChangeEvent : EventArgs {
            
            private CountryRow eventRow;
            
            private DataRowAction eventAction;
            
            public CountryRowChangeEvent(CountryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CountryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CityDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPrimary;
            
            private DataColumn columnCommon;
            
            internal CityDataTable() : 
                    base("City") {
                this.InitClass();
            }
            
            internal CityDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PrimaryColumn {
                get {
                    return this.columnPrimary;
                }
            }
            
            internal DataColumn CommonColumn {
                get {
                    return this.columnCommon;
                }
            }
            
            public CityRow this[int index] {
                get {
                    return ((CityRow)(this.Rows[index]));
                }
            }
            
            public event CityRowChangeEventHandler CityRowChanged;
            
            public event CityRowChangeEventHandler CityRowChanging;
            
            public event CityRowChangeEventHandler CityRowDeleted;
            
            public event CityRowChangeEventHandler CityRowDeleting;
            
            public void AddCityRow(CityRow row) {
                this.Rows.Add(row);
            }
            
            public CityRow AddCityRow(string Primary, string Common) {
                CityRow rowCityRow = ((CityRow)(this.NewRow()));
                rowCityRow.ItemArray = new object[] {
                        Primary,
                        Common};
                this.Rows.Add(rowCityRow);
                return rowCityRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CityDataTable cln = ((CityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CityDataTable();
            }
            
            internal void InitVars() {
                this.columnPrimary = this.Columns["Primary"];
                this.columnCommon = this.Columns["Common"];
            }
            
            private void InitClass() {
                this.columnPrimary = new DataColumn("Primary", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrimary);
                this.columnCommon = new DataColumn("Common", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommon);
                this.CaseSensitive = true;
            }
            
            public CityRow NewCityRow() {
                return ((CityRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CityRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CityRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CityRowChanged != null)) {
                    this.CityRowChanged(this, new CityRowChangeEvent(((CityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CityRowChanging != null)) {
                    this.CityRowChanging(this, new CityRowChangeEvent(((CityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CityRowDeleted != null)) {
                    this.CityRowDeleted(this, new CityRowChangeEvent(((CityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CityRowDeleting != null)) {
                    this.CityRowDeleting(this, new CityRowChangeEvent(((CityRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCityRow(CityRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CityRow : DataRow {
            
            private CityDataTable tableCity;
            
            internal CityRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCity = ((CityDataTable)(this.Table));
            }
            
            public string Primary {
                get {
                    try {
                        return ((string)(this[this.tableCity.PrimaryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCity.PrimaryColumn] = value;
                }
            }
            
            public string Common {
                get {
                    try {
                        return ((string)(this[this.tableCity.CommonColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCity.CommonColumn] = value;
                }
            }
            
            public bool IsPrimaryNull() {
                return this.IsNull(this.tableCity.PrimaryColumn);
            }
            
            public void SetPrimaryNull() {
                this[this.tableCity.PrimaryColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommonNull() {
                return this.IsNull(this.tableCity.CommonColumn);
            }
            
            public void SetCommonNull() {
                this[this.tableCity.CommonColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CityRowChangeEvent : EventArgs {
            
            private CityRow eventRow;
            
            private DataRowAction eventAction;
            
            public CityRowChangeEvent(CityRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StateProvinceDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPrimary;
            
            private DataColumn columnCommon;
            
            private DataColumn columnAbbreviation;
            
            internal StateProvinceDataTable() : 
                    base("StateProvince") {
                this.InitClass();
            }
            
            internal StateProvinceDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PrimaryColumn {
                get {
                    return this.columnPrimary;
                }
            }
            
            internal DataColumn CommonColumn {
                get {
                    return this.columnCommon;
                }
            }
            
            internal DataColumn AbbreviationColumn {
                get {
                    return this.columnAbbreviation;
                }
            }
            
            public StateProvinceRow this[int index] {
                get {
                    return ((StateProvinceRow)(this.Rows[index]));
                }
            }
            
            public event StateProvinceRowChangeEventHandler StateProvinceRowChanged;
            
            public event StateProvinceRowChangeEventHandler StateProvinceRowChanging;
            
            public event StateProvinceRowChangeEventHandler StateProvinceRowDeleted;
            
            public event StateProvinceRowChangeEventHandler StateProvinceRowDeleting;
            
            public void AddStateProvinceRow(StateProvinceRow row) {
                this.Rows.Add(row);
            }
            
            public StateProvinceRow AddStateProvinceRow(string Primary, string Common, string Abbreviation) {
                StateProvinceRow rowStateProvinceRow = ((StateProvinceRow)(this.NewRow()));
                rowStateProvinceRow.ItemArray = new object[] {
                        Primary,
                        Common,
                        Abbreviation};
                this.Rows.Add(rowStateProvinceRow);
                return rowStateProvinceRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                StateProvinceDataTable cln = ((StateProvinceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new StateProvinceDataTable();
            }
            
            internal void InitVars() {
                this.columnPrimary = this.Columns["Primary"];
                this.columnCommon = this.Columns["Common"];
                this.columnAbbreviation = this.Columns["Abbreviation"];
            }
            
            private void InitClass() {
                this.columnPrimary = new DataColumn("Primary", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrimary);
                this.columnCommon = new DataColumn("Common", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommon);
                this.columnAbbreviation = new DataColumn("Abbreviation", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAbbreviation);
                this.CaseSensitive = true;
            }
            
            public StateProvinceRow NewStateProvinceRow() {
                return ((StateProvinceRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new StateProvinceRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(StateProvinceRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StateProvinceRowChanged != null)) {
                    this.StateProvinceRowChanged(this, new StateProvinceRowChangeEvent(((StateProvinceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StateProvinceRowChanging != null)) {
                    this.StateProvinceRowChanging(this, new StateProvinceRowChangeEvent(((StateProvinceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StateProvinceRowDeleted != null)) {
                    this.StateProvinceRowDeleted(this, new StateProvinceRowChangeEvent(((StateProvinceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StateProvinceRowDeleting != null)) {
                    this.StateProvinceRowDeleting(this, new StateProvinceRowChangeEvent(((StateProvinceRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStateProvinceRow(StateProvinceRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StateProvinceRow : DataRow {
            
            private StateProvinceDataTable tableStateProvince;
            
            internal StateProvinceRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableStateProvince = ((StateProvinceDataTable)(this.Table));
            }
            
            public string Primary {
                get {
                    try {
                        return ((string)(this[this.tableStateProvince.PrimaryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStateProvince.PrimaryColumn] = value;
                }
            }
            
            public string Common {
                get {
                    try {
                        return ((string)(this[this.tableStateProvince.CommonColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStateProvince.CommonColumn] = value;
                }
            }
            
            public string Abbreviation {
                get {
                    try {
                        return ((string)(this[this.tableStateProvince.AbbreviationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStateProvince.AbbreviationColumn] = value;
                }
            }
            
            public bool IsPrimaryNull() {
                return this.IsNull(this.tableStateProvince.PrimaryColumn);
            }
            
            public void SetPrimaryNull() {
                this[this.tableStateProvince.PrimaryColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommonNull() {
                return this.IsNull(this.tableStateProvince.CommonColumn);
            }
            
            public void SetCommonNull() {
                this[this.tableStateProvince.CommonColumn] = System.Convert.DBNull;
            }
            
            public bool IsAbbreviationNull() {
                return this.IsNull(this.tableStateProvince.AbbreviationColumn);
            }
            
            public void SetAbbreviationNull() {
                this[this.tableStateProvince.AbbreviationColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StateProvinceRowChangeEvent : EventArgs {
            
            private StateProvinceRow eventRow;
            
            private DataRowAction eventAction;
            
            public StateProvinceRowChangeEvent(StateProvinceRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StateProvinceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
