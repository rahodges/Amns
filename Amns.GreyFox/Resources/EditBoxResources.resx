<?xml version="1.0" encoding="utf-8" ?>
<root>
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="ResMimeType">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="Version">
		<value>1.0.0.0</value>
	</resheader>
	<resheader name="Reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=1.0.3102.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="Writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=1.0.3102.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="eb_SetParagraph" type="System.String">
		<value>function eb_SetParagraph(editor,htmlmode,value)
		{
			if(htmlmode) return;
			editor.focus();
			if(value=='&lt;body&gt;')
			{
				editor.document.execCommand('FormatBlock',false,"Normal");			
				editor.document.execCommand('RemoveFormat');
				return;
			}
			if(!editor.document.execCommand('FormatBlock',false,value))
				alert('Failed to apply format.')				
		}</value>
	</data>
	<data name="eb_Setup" type="System.String">
		<value>function eb_Setup(editor,hidden) {
  editor.document.designMode='On';
  if (editor.value == null) editor.value = editor.innerHTML;
 var d = editor.document;
 d.designMode = 'On';
 d.open();
 d.write(hidden.value);
 d.close();
 editor.document.createStyleSheet('');
 editor.document.createStyleSheet('');
 editor.document.styleSheets[1].disabled = true;
 editor.document.body.contentEditable = 'True';
 eb_ChangeMode(editor,editor.name + '_toolbar',true,false);
 eb_ChangeMode(editor,editor.name + '_toolbar',false,false);
 } 
 
 function eb_ChangeMode(editor,toolbarID,newSetting,autohide) {
 var toolbar = document.getElementById(toolbarID);
 var sTmp;
 if (newSetting) {
 sTmp=editor.document.body.innerHTML;
 editor.document.styleSheets[0].disabled = true;
 editor.document.styleSheets[1].disabled = false;
 if (toolbar != null &amp;&amp; autohide) {
 toolbar.style.display = 'none';
 }
 editor.document.body.innerText=sTmp;
 }
 else {
 sTmp=editor.document.body.innerText;
 editor.document.styleSheets[0].disabled = false;
 editor.document.styleSheets[1].disabled = true;
 if (toolbar != null &amp;&amp; autohide) {
 toolbar.style.display = 'inline';
 }
 editor.document.body.innerHTML=sTmp;
 }
 editor.focus();} 
 function eb_Format(editor,htmlmode,format)
 {
 if (!htmlmode)
 {
 editor.focus();
 editor.document.execCommand(format,'',null);
 }
 else
 {
 alert('To use the toolbar, change the HTML view setting');
 }
 }</value>
	</data>
	<data name="eb_InsertRow" type="System.String">
		<value>function eb_InsertRow(editor,htmlmode) {
  if (htmlmode) return;
 eb_ID = editor;
 objReference=eb_GetRangeReference(eb_ID);
 objReference=eb_CheckTag(objReference,'/^(TABLE)|^(TR)|^(TD)|^(TBODY)/');
 switch(objReference.tagName)
 {
 case 'TABLE' :
 var newTable=objReference.cloneNode(true);
 var newRow= newTable.insertRow();
 
 for(x=0; x&lt;newTable.rows[0].cells.length; x++)
 {
 var newCell = newRow.insertCell();
 }
 objReference.outerHTML=newTable.outerHTML;
 break;
 case 'TBODY' :
 var newTable=objReference.cloneNode(true);
 var newRow = newTable.insertRow();
 for(x=0; x&lt;newTable.rows[0].cells.length; x++)
 {
 var newCell = newRow.insertCell();
 }
 objReference.outerHTML=newTable.outerHTML;
 break;
 case 'TR' :
 var rowIndex = objReference.rowIndex;
 var parentTable=objReference.parentElement.parentElement;
 var newTable=parentTable.cloneNode(true);
 var newRow = newTable.insertRow(rowIndex+1);
 for(x=0; x&lt; newTable.rows[0].cells.length; x++)
 {
 var newCell = newRow.insertCell();
 }
 parentTable.outerHTML=newTable.outerHTML;
 break;
 case 'TD' :
 var parentRow=objReference.parentElement;
 var rowIndex = parentRow.rowIndex;
 var cellIndex=objReference.cellIndex;
 var parentTable=objReference.parentElement.parentElement.parentElement;
 var newTable=parentTable.cloneNode(true);
 var newRow = newTable.insertRow(rowIndex+1);
 for(x=0; x&lt; newTable.rows[0].cells.length; x++)
 {
 var newCell = newRow.insertCell();
 if (x==cellIndex)newCell.id='ura';
 }
 parentTable.outerHTML=newTable.outerHTML;
 var r = eb_ID.document.body.createTextRange();
 var item=eb_ID.document.getElementById('ura');
 item.id='';
 r.moveToElementText(item);
 r.moveStart('character',r.text.length);
 r.select();
 break;
 default :
 eb_InsertTable(eb_ID,1,3);
 return;
 }
 
 }</value>
	</data>
	<data name="eb_SetForeColor" type="System.String">
		<value>function eb_ForeColorPicker(editor,htmlmode) {
  if (htmlmode) return;
 showModalDialog('/richtextbox/colorpicker.aspx?editor=' + editor.name + '&amp;command=forecolor',window,'dialogHeight=450px;dialogWidth=220px;status=no');
 }</value>
	</data>
	<data name="eb_Print" type="System.String">
		<value>function eb_Print(editor,htmlmode) {
editor.document.execCommand('print','',null);
}</value>
	</data>
	<data name="eb_Bold" type="System.String">
		<value>function eb_Bold(editor,htmlmode) {
  eb_Format(editor,htmlmode,'bold');
}</value>
	</data>
	<data name="eb_SetStyle" type="System.String">
		<value>function eb_SetStyle(editor,htmlmode,name,value)
 {
 if (htmlmode) return;
 if (value != '')
 {
 editor.focus();
 editor.document.execCommand('removeFormat');
 editor.document.execCommand('formatBlock','','Normal');
 sel = editor.document.selection.createRange();
 html = '&lt;font class=\'' + value + '\'&gt;' + sel.htmlText + '&lt;/font&gt;';
 sel.pasteHTML(html);
 }
 }</value>
	</data>
	<data name="eb_InsertSymbol" type="System.String">
		<value>function eb_InsertSymbol(editor,htmlmode,name,value)
 {
 if (htmlmode) return;
 editor.focus();
 sel = editor.document.selection.createRange();
 sel.pasteHTML(value);
 }</value>
	</data>
	<data name="eb_Bullets" type="System.String">
		<value>function eb_Bullets(editor,htmlmode) { eb_Format(editor,htmlmode,'insertunorderedlist'); }</value>
	</data>
	<data name="eb_Redo" type="System.String">
		<value>function eb_Redo(editor,htmlmode)
 {
 editor.focus();
     editor.document.execCommand('redo','',null);
 }</value>
	</data>
	<data name="eb_ImageMenu" type="System.String">
		<value>function eb_ImageMenu(editor,htmlmode,name,value)
 {
 if (value != '')
 {
 if (htmlmode) return;
 editor.focus();
 editor.document.execCommand('InsertImage','',value);
 }
 }</value>
	</data>
	<data name="eb_InsertImage" type="System.String">
		<value>function eb_InsertImage(editor,htmlmode)
 {
     if (!htmlmode)
 {
     editor.focus();
         editor.document.execCommand('InsertImage','1','');
 }
 }</value>
	</data>
	<data name="eb_InsertColumn" type="System.String">
		<value>function eb_InsertColumn(editor,htmlmode)
 {
 if (htmlmode) return;
 eb_ID = editor;
 objReference= eb_GetRangeReference(eb_ID);
 objReference=eb_CheckTag(objReference,'/^(TABLE)|^(TR)|^(TD)|^(TBODY)/');
 switch(objReference.tagName)
 {
 case 'TABLE' :// IF a table is selected, it adds a new column on the right hand side of the table.
 var newTable=objReference.cloneNode(true);
 for(x=0; x&lt;newTable.rows.length; x++)
 {
 var newCell = newTable.rows[x].insertCell();
 }
 newCell.focus();
 objReference.outerHTML=newTable.outerHTML;
 break;
 case 'TBODY' :// IF a table is selected, it adds a new column on the right hand side of the table.
 var newTable=objReference.cloneNode(true);
 for(x=0; x&lt;newTable.rows.length; x++)
 {
 var newCell = newTable.rows[x].insertCell();
 }
 objReference.outerHTML=newTable.outerHTML;
 break;
 case 'TR' :// IF a table is selected, it adds a new column on the right hand side of the table.
 objReference=objReference.parentElement.parentElement;
 var newTable=objReference.cloneNode(true);
 for(x=0; x&lt;newTable.rows.length; x++)
 {
 var newCell = newTable.rows[x].insertCell();
 }
 objReference.outerHTML=newTable.outerHTML;
 break;
 case 'TD' :// IF the cursor is in a cell, or a cell is selected, it adds a new column to the right of that cell.
 var cellIndex = objReference.cellIndex;//Get cellIndex
 var rowIndex=objReference.parentElement.rowIndex;
 var parentTable=objReference.parentElement.parentElement.parentElement;
 var newTable=parentTable.cloneNode(true);
 for(x=0; x&lt;newTable.rows.length; x++)
 {
 var newCell = newTable.rows[x].insertCell(cellIndex+1);
 if (x==rowIndex)newCell.id='ura';
 }
 parentTable.outerHTML=newTable.outerHTML;
 var r = eb_ID.document.body.createTextRange();
 var item=eb_ID.document.getElementById('ura');
 item.id='';
 r.moveToElementText(item);
 r.moveStart('character',r.text.length);
 r.select();
 break;
 default :// IF the cursor is not in a table, it acts as if they clicked Insert Table.
 eb_InsertTable(eb_ID,3,1);
 return;
 }
 }</value>
	</data>
	<data name="eb_Format" type="System.String">
		<value>function eb_Format(editor,htmlmode,format)
 {
 if (!htmlmode)
 {
 editor.focus();
 editor.document.execCommand(format,'',null);
 }
 else
 {
 alert('To use the toolbar, change the HTML view setting');
 }
 }</value>
	</data>
	<data name="eb_Cut" type="System.String">
		<value>function eb_Cut(editor,htmlmode)
 {
 editor.focus();
     editor.document.execCommand('cut','',null);
 }</value>
	</data>
	<data name="eb_LJustify" type="System.String">
		<value>function eb_LJustify(editor,htmlmode) { eb_Format(editor,htmlmode,'justifyleft'); }</value>
	</data>
	<data name="eb_DeleteColumn" type="System.String">
		<value>function eb_DeleteColumn(editor,htmlmode)
 {
 if (htmlmode) return;
 eb_ID = editor;
 objReference=eb_GetRangeReference(eb_ID);
 objReference=eb_CheckTag(objReference,'/^(TABLE)|^(TR)|^(TD)|^(TBODY)/');
 switch(objReference.tagName)
 {
 
 case 'TD' :var rowIndex=objReference.parentElement.rowIndex;
 var cellIndex = objReference.cellIndex;//Get cellIndex
 var parentTable=objReference.parentElement.parentElement.parentElement;
 var newTable=parentTable.cloneNode(true);
 if (newTable.rows[0].cells.length==1)
 {
 parentTable.removeNode(true);
 return;
 }
 for(x=0; x&lt;newTable.rows.length; x++)
 {
 if (newTable.rows[x].cells[cellIndex]=='[object]')
 {
 newTable.rows[x].deleteCell(cellIndex);
 }
 }
 if (cellIndex&gt;=newTable.rows[0].cells.length)
 {
 cellIndex=newTable.rows[0].cells.length-1;
 }
 if (cellIndex&gt;=0)  newTable.rows[rowIndex].cells[cellIndex].id='ura';
 parentTable.outerHTML=newTable.outerHTML;
 if (cellIndex&gt;=0){
 var r = eb_ID.document.body.createTextRange();
 var item=eb_ID.document.getElementById('ura');
 item.id='';
 r.moveToElementText(item);
 r.moveStart('character',r.text.length);
 r.select();
 }
 break;
 default :return;
 }
 }</value>
	</data>
	<data name="eb_InsertTable" type="System.String">
		<value>function eb_InsertTable(eb_ID,rows,columns)
 {
 eb_ID.focus();
 var newTable = eb_ID.document.createElement('TABLE');
 for(y=0; y&lt;rows; y++)
 {
 var newRow = newTable.insertRow();
 
 for(x=0; x&lt;columns; x++)
 {
 var newCell = newRow.insertCell();
 if ((y==0)&amp;&amp;(x==0)) newCell.id='ura';
 }
 }
 newTable.border = 1;
 newTable.width = 25 * columns;
 if (eb_ID.document.selection.type=='Control')
 {
 sel.pasteHTML(newTable.outerHTML);
 }
 else
 {
 sel = eb_ID.document.selection.createRange();
 sel.pasteHTML(newTable.outerHTML);
 }
 
 var r = eb_ID.document.body.createTextRange();
 var item=eb_ID.document.getElementById('ura');
 item.id='';
 r.moveToElementText(item);
 r.moveStart('character',r.text.length);
 r.select();
 }</value>
	</data>
	<data name="eb_Time" type="System.String">
		<value>function eb_Time(editor,htmlmode)
 {
 editor.focus();
 var d = new Date();
 sel = editor.document.selection.createRange();
 sel.pasteHTML(d.toLocaleTimeString());
 }</value>
	</data>
	<data name="eb_RJustify" type="System.String">
		<value>function eb_RJustify(editor,htmlmode) { eb_Format(editor,htmlmode,'justifyright'); }</value>
	</data>
	<data name="eb_Date" type="System.String">
		<value>function eb_Date(editor,htmlmode)
 {
 editor.focus();
 var d = new Date();
 sel = editor.document.selection.createRange();
 sel.pasteHTML(d.toLocaleDateString());
 }</value>
	</data>
	<data name="eb_Italic" type="System.String">
		<value>function eb_Italic(editor,htmlmode) { eb_Format(editor,htmlmode,'italic'); }</value>
	</data>
	<data name="eb_InsertDefaultTable" type="System.String">
		<value>function eb_InsertDefaultTable(editor,htmlmode)
 {
 if (htmlmode) return;
 eb_InsertTable(editor,3,3);
 }</value>
	</data>
	<data name="eb_Numbered" type="System.String">
		<value>function eb_Numbered(editor,htmlmode) { eb_Format(editor,htmlmode,'insertorderedlist'); }</value>
	</data>
	<data name="eb_SetFontBackColor" type="System.String">
		<value>function eb_SetFontBackColor(editor,htmlmode,name,value)
 {
 if (htmlmode) return;
 editor.focus();
 editor.document.execCommand('backcolor','',value);
 }</value>
	</data>
	<data name="eb_Underlinw" type="System.String">
		<value>function eb_Underline(editor,htmlmode) { eb_Format(editor,htmlmode,'underline'); }</value>
	</data>
	<data name="eb_Indent" type="System.String">
		<value>function eb_Indent(editor,htmlmode) { eb_Format(editor,htmlmode,'indent'); }</value>
	</data>
	<data name="eb_Copy" type="System.String">
		<value>function eb_Copy(editor,htmlmode)
 {
 editor.focus();
     editor.document.execCommand('copy','',null);
 }</value>
	</data>
	<data name="eb_Strikethrough" type="System.String">
		<value>function eb_Strikethrough(editor,htmlmode) { eb_Format(editor,htmlmode,'strikethrough'); }</value>
	</data>
	<data name="eb_DeleteRow" type="System.String">
		<value>function eb_DeleteRow(editor,htmlmode)
 {
 if (htmlmode) return;
 eb_ID = editor;
 objReference=eb_GetRangeReference(eb_ID);
 objReference=eb_CheckTag(objReference,'/^(TABLE)|^(TR)|^(TD)|^(TBODY)/');
 switch(objReference.tagName)
 {
 case 'TR' :var rowIndex = objReference.rowIndex;//Get rowIndex
 var parentTable=objReference.parentElement.parentElement;
 parentTable.deleteRow(rowIndex);
 break;
 case 'TD' :var cellIndex=objReference.cellIndex;
 var parentRow=objReference.parentElement;//Get Parent Row
 var rowIndex = parentRow.rowIndex;//Get rowIndex
 var parentTable=objReference.parentElement.parentElement.parentElement;
 parentTable.deleteRow(rowIndex);
 if (rowIndex&gt;=parentTable.rows.length)
 {
 rowIndex=parentTable.rows.length-1;
 }
 if (rowIndex&gt;=0)
 {
 var r = eb_ID.document.body.createTextRange();
 r.moveToElementText(parentTable.rows[rowIndex].cells[cellIndex]);
 r.moveStart('character',r.text.length);
 r.select();
 }
 else
 {
 parentTable.removeNode(true);
 }
 break;
 
 default :return;
 }
 }</value>
	</data>
	<data name="eb_Undo" type="System.String">
		<value>function eb_Undo(editor,htmlmode)
 {
 editor.focus();
     editor.document.execCommand('undo','',null);
 }</value>
	</data>
	<data name="eb_SetFontSize" type="System.String">
		<value>function eb_SetFontSize(editor,htmlmode,value)
 {
 if (htmlmode) return;
 editor.focus();
 editor.document.execCommand('fontsize','',value);
 }</value>
	</data>
	<data name="eb_InsertEmoticon" type="System.String">
		<value>function eb_InsertEmoticon(editor,htmlmode,name,value)
 {
 if (htmlmode) return;
 editor.focus();
 sel = editor.document.selection.createRange();
 sel.pasteHTML('&lt;img src=' + value + ' /&gt;');
 }</value>
	</data>
	<data name="eb_Paste" type="System.String">
		<value>function eb_Paste(editor,htmlmode)
 {
 editor.focus();
     editor.document.execCommand('paste','',null);
 }</value>
	</data>
	<data name="eb_CJustify" type="System.String">
		<value>function eb_CJustify(editor,htmlmode) { eb_Format(editor,htmlmode,'justifycenter'); }</value>
	</data>
	<data name="eb_InsertLink" type="System.String">
		<value>function eb_InsertLink(editor,htmlmode,name,value)
 {
 if (htmlmode) return;
 editor.focus();
 sel = editor.document.selection.createRange();
 sel.pasteHTML('&lt;a href=' + value + '&gt;' + name + '&lt;/a&gt;');
 }</value>
	</data>
	<data name="eb_Superscript" type="System.String">
		<value>function eb_Superscript(editor,htmlmode) { eb_Format(editor,htmlmode,'superscript'); }</value>
	</data>
	<data name="eb_Outdent" type="System.String">
		<value>function eb_Outdent(editor,htmlmode) { eb_Format(editor,htmlmode,'outdent'); }</value>
	</data>
	<data name="eb_InsertMenu" type="System.String">
		<value>function eb_InsertMenu(editor,htmlmode,name,value)
 {
 if (htmlmode) return;
 editor.focus();
 sel = editor.document.selection.createRange();
 sel.pasteHTML(value);
 }</value>
	</data>
	<data name="eb_BackColorPicker" type="System.String">
		<value>function eb_BackColorPicker(editor,htmlmode)
 {
 if (htmlmode) return;
 showModalDialog('/richtextbox/colorpicker.aspx?editor=' + editor.name + '&amp;command=backcolor',window,'dialogHeight=450px;dialogWidth=220px;status=no');
 }</value>
	</data>
	<data name="eb_SetFont" type="System.String">
		<value>function eb_SetFont(editor,htmlmode,value)
 {
 if (htmlmode) return;
 editor.focus();
 editor.document.execCommand('fontname','',value);
 }</value>
	</data>
	<data name="eb_HRule" type="System.String">
		<value>function eb_HRule(editor,htmlmode) { eb_Format(editor,htmlmode,'inserthorizontalrule'); }</value>
	</data>
	<data name="eb_GetRangeReference" type="System.String">
		<value>function eb_GetRangeReference(eb_ID) {
		eb_ID.focus();
		var objReference = null;
		var RangeType = eb_ID.document.selection.type;
		var selectedRange = eb_ID.document.selection.createRange();
		
		switch(RangeType) {
			case 'Control' :
				if (selectedRange.length &gt; 0 ) {
					objReference = selectedRange.item(0);
				}
				break;
		case 'None' :
			objReference = selectedRange.parentElement();
			break;
		case 'Text' :
			objReference = selectedRange.parentElement();
			break;
		}
		return objReference
	}</value>
	</data>
	<data name="eb_Underline" type="System.String">
		<value>function eb_Underline(editor,htmlmode) {
			eb_Format(editor,htmlmode,'underline');
		}</value>
	</data>
	<data name="eb_SetStyle" type="System.String">
		<value>function eb_SetStyle(editor,htmlmode,value) {
	if (htmlmode) return;
	if (value != '') {
		editor.focus();
		editor.document.execCommand('removeFormat');
		editor.document.execCommand('formatBlock','','Normal');
		sel = editor.document.selection.createRange();
		html = '&lt;font class=\'' + value + '\'&gt;' + sel.htmlText + '&lt;/font&gt;';
		sel.pasteHTML(html);
	}
 }</value>
	</data>
	<data name="eb_SetFont" type="System.String">
		<value>function eb_SetFont(editor,htmlmode,value)
 {
 if (htmlmode) return;
 editor.focus();
 editor.document.execCommand('fontname','',value);
 }</value>
	</data>
	<data name="eb_SetFontForeColor" type="System.String">
		<value>function eb_SetFontForeColor(editor,htmlmode,value)
 {
 if (htmlmode) return;
 editor.focus();
 editor.document.execCommand('forecolor','',value);
 }</value>
	</data>
	<data name="eb_Subscript" type="System.String">
		<value>function eb_Subscript(editor,htmlmode) { eb_Format(editor,htmlmode,'subscript'); }</value>
	</data>
</root>